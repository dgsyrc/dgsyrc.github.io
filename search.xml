<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019中考备考记]]></title>
    <url>%2F2019%2F05%2F18%2F2019%E4%B8%AD%E8%80%83%E5%A4%87%E8%80%83%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[特长生考试已结束 3年OIer生涯无悔， 140分看着就知道要咕咕了（就是没考上） 这手气我也无语了： 最后33天，初中的最后33天，肝文化课，加油！ 目标：730 计算和看题不准失分 下周二模Rp++ end. return 730;]]></content>
      <tags>
        <tag>考试</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解 P1443 【马的遍历】]]></title>
    <url>%2F2019%2F05%2F13%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3%20P1443%20%E3%80%90%E9%A9%AC%E7%9A%84%E9%81%8D%E5%8E%86%E3%80%91%2F</url>
    <content type="text"><![CDATA[主要思想 bfs运用队列queue减少代码量（坐标数组）简单点来说就是先从马的位置开始搜索，搜索马可以到达的点： 蓝色点即为马可以到达的点（马走日），红色为马所在位置： 上代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;using namespace std;int node[9][2]=&#123;&#123;0,0&#125;,&#123;-2,1&#125;,&#123;1,-2&#125;,&#123;2,-1&#125;,&#123;-1,2&#125;,&#123;2,1&#125;,&#123;-2,-1&#125;,&#123;1,2&#125;,&#123;-1,-2&#125;&#125;;//坐标数组，节省代码量int n,m,xs,ys,map[401][401];struct zb//结构体&#123; int x,y,bu;&#125;;queue&lt;zb&gt; Q;//队列int main()&#123; cin&gt;&gt;n&gt;&gt;m&gt;&gt;xs&gt;&gt;ys;//输入 memset(map,10000,sizeof(map));//初始化，便于后面的搜索比较和输出 map[xs][ys]=0;//一定要是0（马所在点步数为0） Q.push((zb)&#123;xs,ys,0&#125;);//进队 while(!Q.empty()) &#123; zb news=Q.front(); Q.pop(); for(int a=1;a&lt;=8;a++) &#123; if(news.y+node[a][1]&gt;0&amp;&amp;news.y+node[a][1]&lt;=m&amp;&amp;news.x+node[a][0]&gt;0&amp;&amp;news.x+node[a][0]&lt;=n&amp;&amp;map[news.x+node[a][0]][news.y+node[a][1]]&gt;news.bu+1)//又长又臭的if语句，比较步数，判断是否越界 &#123; map[news.x+node[a][0]][news.y+node[a][1]]=news.bu+1;//更新 Q.push((zb)&#123;news.x+node[a][0],news.y+node[a][1],news.bu+1&#125;); &#125; &#125; &#125; for(int a=1;a&lt;=n;a++) &#123; for(int b=1;b&lt;=m;b++) &#123; if(map[a][b]&gt;=10000) &#123; printf("%-5d",-1); &#125; else &#123; printf("%-5d",map[a][b]); &#125; &#125; cout&lt;&lt;endl; &#125;&#125; 就这么简单，预祝明日特长生考试通过！题目详见:https://www.luogu.org/problemnew/show/P1443]]></content>
      <tags>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的Minecraft生存系列（2）]]></title>
    <url>%2F2019%2F02%2F13%2F%E6%88%91%E7%9A%84Minecraft%E7%94%9F%E5%AD%98%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[存档快两个月了，怎么说也会发生翻天覆地的变化了。 世界时间：Day 66 这一个月主要也就升级了一下内部装饰，然后就是采集资源。 不要问我问什么还没打龙，因为没遇过小黑（谁叫我老是在地底工作） 添加部分：瞭望塔： 活塞门： 家（实体建筑）： 铁匠铺： 附魔室： 酿药室： 刷石机： 小型生态建筑： 地下社区： 升级部分：农场： 新进度：废弃矿坑： 洞穴蜘蛛刷怪笼： 期待下一篇报导！]]></content>
      <tags>
        <tag>Minecraft</tag>
        <tag>我的世界</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pixiv 手机版登录教程]]></title>
    <url>%2F2019%2F02%2F08%2Fpixiv-%E6%89%8B%E6%9C%BA%E7%89%88%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[上个月发了一篇电脑版的，现在就来介绍一下手机版的吧。 由于手机端似乎没有host，所以只能借助一下外国的神奇软件了。 软件谷歌空间 安装完成后即可进入下一步 步骤下载pixiv 打开谷歌空间，搜索pixiv，下载安装 准备环境去到谷歌空间启动栏，点击pixiv图标，会提示准备谷歌运行环境。 若没有出现下图所示进度条，则需重启谷歌空间，重复上述步骤： 网络加速 在启动页点击加速，选择日本或台湾线路即可 完成 点击pixiv，若如上图所示则表示成功（当然第二张是登陆后的）]]></content>
      <tags>
        <tag>教程</tag>
        <tag>pixiv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建说明书（指北书）]]></title>
    <url>%2F2019%2F02%2F01%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%B4%E6%98%8E%E4%B9%A6%EF%BC%88%E6%8C%87%E5%8C%97%E4%B9%A6%EF%BC%89%2F</url>
    <content type="text"><![CDATA[提起博客，这似乎是一个需要氪金的工程，实不然。 我开始的理解：博客=域名（at least 10￥）+代码（HTML、CSS、JavaScript…）+服务器（at least 3000￥） 但后来，当我看到Hexo这款神奇的开源的静态博客生成器，就彻底改变了我的想法。 网上有很多教程，但总找不到全面和有效的（本来Hexo的坑就多），所以今天就和各位分享一下。 优点 应用markdown，易于编辑，博客前端自动生成无需搭建 能够像手机一样自由添加应用（即插件） 无需基础，只要你对代码敏感就好 缺点： 博客访问用的文件生成的速度和上传博客的速度跟电脑配置有关，一般较慢 博客源文件（配置好）占用你的硬盘内存较大，一般接近1G或以上 材料/工具: 一个github账号 git node.js 安装完成后即可进入下一步。 基础配置:本地：本步骤时间较长，请耐心等待。 在本地创建一个新的文件夹（必须为新的/空的），名字自行定义。 打开文件夹后鼠标右键打开Git Bash。 输入npm install -g hexo下载Hexo 输入hexo init安装Hexo（此时文件夹下会陆续出现文件/文件夹） 输入npm install安装必要配置包 输入hexo s启动Hexo，打开浏览器输入地址localhost:4000查看 云端：在github上新建存储库你的github用户名.github.io 进入存储库后，打开这里： 找到这行并修改成如下： 在Git Bash中输入ssh-keygen生成SSH密钥，并按三次回车，随后用记事本打开C:\Users\Administrator\.ssh\id_rsa.pub（本目录因电脑而异，大部分相同），把内容复制下来，打开https://github.com/settings/keys,新建一个SSH Key，粘贴key项目内（title随便填），最后按下add SSh key。 回到Git Bash，输入ssh -T git@github.com,若显示Hi!xxxx的字眼，则代表成功。 接下来输入npm install hexo-deployer-git --save安装上传工具deployer 打开文件夹根目录下的_config.yml，找到如下部分并按要求修改： 注意：该配置项:后要有两个空格（当时就把我坑到了） 1234deploy: type: git repository: git@github.com:你的github用户名/你的github用户名.github.io.git branch: master 输入hexo g生成静态博客文件 输入hexo d上传文件至github 若是首次上传，会失败，会有以下提示： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail@example.com&quot; 将这两行指令分别复制并将yorname``youremail@example.com分别替换成你的github用户名与注册邮箱，重新粘贴至Git Bash即可。 博客配置：终于到最复杂的环节了，但其实认真读一遍说明你就会感到豁然开朗。 我这里就只介绍NexT主题（V6.7.0）中的Gemini风格的配置，同主题不同风格注意_config.yml中的设置限制（基本没有限制），其他主题参阅官网（其实大都相似） 以下所有步骤均建议配置完成后输入hexo s启动本地浏览，进入localhost:4000验证。 主题安装：下载NexT主题（V6.7.0） 把压缩包直接解压到博客根目录下的theme文件夹内： 打开博客根目录下的_config.yml，找到这行并修改成如下： 1theme: hexo-theme-next-6.7.0 首页标题/名字/语言设置打开博客根目录下的_config.yml. 其它语言参照/theme/languages/下的语言配置文件（可魔改） 例子： 123456789101112# 标题title: YRC的博客#小标题subtitle: Nothing is impossible！description:keywords:# 名字author: YRC# 语言language: zh-CN# 时区（不建议使用）timezone: 博客图标：1234favicon: # 网站图标-放在主题目录下/source/images/,按照你的图标名修改以下两行即可 small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png 目录：主目录： 按个人所需使用，每行设置前加#的为不显示。 home 主页 about 关于 tags 标签（配置在下文会提到） archives 归档 其他的项目不建议小白使用（因为真的没什么用） 若要添加新的选项，按照name: /(在博客根目录下source文件夹下的地址) || 图标,并在Git Bash输入hexo new page &quot;about&quot;新建页面，在/soure/about/index.md内即可编辑 图标的名字参照官网 1234567891011menu: # 目录 home: / || home about: /about/ || user tags: /tags/ || tags # categories: /categories/ || th archives: /archives/ || archive # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # commonweal: 404.html || false # 加#号的用处不大，在此不赘述（且要安装插件） 文章内部目录栏 123456789toc: # 是否生成文章目录 enable: true # 目录是否自动添加序号 number: true # 目录中的字符长度若大于目录栏宽度，多余的字符则放下一行，否则多余字符以省略号代替 wrap: false # 默认即可 max_depth: 6 目录栏的位置：1234sidebar: # 目录栏在博客中的位置 left | right (only for Pisces | Gemini). position: left #position: right 设置主题风格123456# Schemes# NexT主题下的四种风格#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 社交网站 || 后面的仍为图标名，参照上文中目录图标设置即可。 例子： 123456social: # 社交网站 GitHub: https://github.com/dgsyrc || github E-Mail: mailto:yrcminecraft@qq.com || envelope luogu: https://www.luogu.org/space/show?uid=89910 || code bilibili: http://space.bilibili.com/179225431? || tv 若不想显示图标，则将下面这行设置为false. 12345social_icons: # 不显示图标 enable: false # 只显示图标 icons_only: false 友情链接 123456789101112131415# 标题前图标links_icon: link# 标题links_title: 友情链接(部分需翻墙)# 排版设置（不加#为设置项，加#不设置，二者不可~~得兼~~同时设置）#一行一个#links_layout: block #一行多个links_layout: inline# 链接links: cloudflare: https://dash.cloudflare.com freenom: https://my.freenom.com/clientarea.php Minecraft Wiki: https://minecraft-zh.gamepedia.com/Minecraft_Wiki Pixiv: https://www.pixiv.net 头像12345678910# 头像avatar: # 头像地址（以根目录下的source为根目录的地址，而非主题下的source） url: /images/main.png # 头像圆形 rounded: true # 0不显示头像，1显示 opacity: 1 # 头像旋转 rotated: true 返回顶部按钮： 找到如下代码： b2t: true为显示，b2t: false为不显示。 1234# 返回顶部按钮 b2t: true # 显示阅读百分比 scrollpercent: true 阅读全文按钮：enable: true为主页显示全文，enable: false为主页不显示全文。 123456auto_excerpt: enable: true # 主页每篇文章显示字数 length: 150# 在主页是否显示阅读全文按钮read_more_btn: true 文章字数/阅读时长统计 在Git Bash中输入以下指令，安装插件。 1npm install hexo-symbols-count-time --save 修改如下代码： 博客目录下_config.yml： 1234567symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 主题目录下_config.yml： 1234567# 博客字数，阅读时长统计symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 代码复制按钮1234567codeblock: border_radius: copy_button: # 是否启用 enable: true # 是否提示复制成功 show_result: true 使用$Latex$当per_page: true时，只有博文中有mathjax: true时才启用，若为false,则每篇文章都启用。 1234567math: # 是否启用 enable: true per_page: true # 推荐使用mathjax engine: mathjax #engine: katex 分享页面左边浮动按钮： 文章底部： 在Git Bash中输入git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton安装插件。 修改如下配置： 12345678910111213141516171819needmoreshare2:# 添加分享按钮 enable: true postbottom: # 每一篇文章底部显示按钮 enable: true options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: # 页面左边显示浮动按钮 enable: true options: iconStyle: box boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook 访问统计文章访问统计： 博客访问统计： 修改如下设置即可： 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 站内搜索 在Git Bash中输入npm install hexo-generator-searchdb --save安装插件。 在博客目录下的_config.yml添加如下设置： 12345search: path: search.xml field: post format: html limit: 10000 在theme目录下的_config.yml修改如下设置： 12345# 站内搜索local_search: enable: true top_n_per_article: 1 unescape: false 书签添加书签后，访客每次访问文章时会返回到上次阅读的那行。 在Git Bash中输入git clone https://github.com/theme-next/theme-next-bookmark.git source/lib/bookmark安装插件。 12345678# 书签bookmark: enable: true # if auto # - save the reading position when closing the page # - or clicking the bookmark-icon # if manual, only save it by clicking the bookmark-icon save: auto 标签在Git Bash中输入hexo new page &quot;tags&quot;新建Tag页面。 然后向source\tags\index.md中添加一行： 1type: &quot;tags&quot; 文章标签的设置如下： 1234tags:- 标签1- 标签2- 标签3 背景打开themes目录下\source\css\_custom\custom.styl 添加如下代码: 123456789body &#123; background-image:url(/images/background2.jpg); background-repeat: no-repeat; background-attachment:fixed; background-size: cover;&#125;.main-inner &#123; opacity: 0.9;&#125; background-image:url:背景链接，目录默认为主题目录下的\soure\images\ background-repeat: no-repeat:背景图不重复出现 background-size: cover:平铺 opacity::不透明度 鼠标点击显示爱心图案下载js： 将该js放在主题根目录下\source\js\src内。 打开layout/_layout.swig,在文件末尾添加一行： 1&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 文章的撰写新建文章在Git Bash输入hexo new &quot;文章名&quot;新建文章 如想在文中引用博客内图片，则需修改博客目录下的_config.yml的这一行（为true即可），以便以后使用hexo new命令时自动生成文件夹，需引用的图片需放在博客根目录下的\source\_post\文章名\内： 1post_asset_folder: true 除了可以使用命令添加文章外，还可以直接在_post文件夹内直接新建文章名.md与文件夹文章名，但是文章名.md内必须按照以下格式： 12345678---title: 文章名mathjax: true（此行可去）date: 2019-02-01 12:30:42（可自定义，当然设为1000-01-01 00:00:00是没有问题的）tags:- Tag1- Tag2--- 撰写打开\source\_post\文章名.md 按照markdown的语法写即可。 完成部分效果可参考我的hexo博客]]></content>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[习作-遇见檀香]]></title>
    <url>%2F2019%2F01%2F26%2F%E4%B9%A0%E4%BD%9C-%E9%81%87%E8%A7%81%E6%AA%80%E9%A6%99%2F</url>
    <content type="text"><![CDATA[遇见檀香 &#160; &#160; &#160; &#160;神台的周围烟雾缭绕，檀香四溢，奶奶口中的喃喃细语，耳边萦绕。&#160; &#160; &#160; &#160;那是那年过年之时，我和父母早早地就来到了老家。红色的对联，响亮的鞭炮声，到处都洋溢着新年的气氛。看到爷爷，我便快步走向前，相互祝福了一番，讨了个红包，随后就去找奶奶。&#160; &#160; &#160; &#160;找到奶奶时，她正在整理神台，上面的祭品摆放得整整齐齐。跟着他便点燃檀香，轻轻地插在神台上，顿时四周变得烟雾缭绕起来。&#160; &#160; &#160; &#160;她拾起桌上的一沓金银纸，放在手心，双手合十，面对着檀香，口中念念有词，开始时我很不理解，认为这是迷信，但我又伫立听了一阵，那声声祷告，竟都是对子孙美好的祝愿。&#160; &#160; &#160; &#160;记得那次，我因贪玩，在神台上多插了几根檀香，又偷偷地拿来打火机，把檀香点燃，随后我又对着檀香开始拼命地吹。这这时，奶奶来了，她一把夺过我手中的打火机，然后拿起神台上正冒着烟的檀香，留下了三根插回神台，又急匆匆地把剩下的檀香分别插在其它香炉上，一阵子，就回到了神台前，低下额头，闭上眼睛，双手合十，嘴中又不知念叨了些什么，随后就回去做刚才未完成的事了。&#160; &#160; &#160; &#160;我本不信佛，但是奶奶她那虔诚的祷告声，却让我沉迷在其中，却让我看到了她对我们这个家庭默默的付出，让我终于明白了这些檀香、祭品存在的含义。&#160; &#160; &#160; &#160;檀香的烟雾渐浓，似蓬莱仙境，又似菩萨显灵。那一声声祷告，一句句祷词，实是人到暮年时的一种精神寄托，也是对子孙的美好祝愿，我们更应多陪伴他们，让他们的心里更加得踏实，更能安度晚年。&#160; &#160; &#160; &#160;那声声悼词，阵阵檀香，仍在我耳边回环萦绕，眼前缭绕，久而不散。 本文为作者原创，未经本人许可禁止转载！]]></content>
      <tags>
        <tag>学习</tag>
        <tag>习作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pixiv 电脑版登录教程]]></title>
    <url>%2F2019%2F01%2F26%2Fpixiv-%E7%94%B5%E8%84%91%E7%89%88%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前天我突然发现pixiv挂蓝灯进不去了，纯host也不行，于是经过我大量的资料搜索，终于发现了一条拯救之路。 不说这么多，基本上看图就懂。 下载配置包链接：https://github.com/dgsyrc/file/blob/master/Pixiv.rar?raw=true 把配置包解压到纯英文字母路径的目录下（推荐D:) 安装证书 更改host host目录在 C:\Windows\System32\drivers\etc 下 打开host，把下面的东西复制在host文件里 123456789101112131415161718192021222324252627282930127.0.0.1 www.google.com#Pixiv Start127.0.0.1 pixiv.net 127.0.0.1 www.pixiv.net 127.0.0.1 ssl.pixiv.net127.0.0.1 accounts.pixiv.net 127.0.0.1 touch.pixiv.net127.0.0.1 oauth.secure.pixiv.net127.0.0.1 dic.pixiv.net127.0.0.1 en-dic.pixiv.net 127.0.0.1 sketch.pixiv.net127.0.0.1 payment.pixiv.net127.0.0.1 factory.pixiv.net 127.0.0.1 comic.pixiv.net 127.0.0.1 novel.pixiv.net 127.0.0.1 imgaz.pixiv.net 127.0.0.1 sensei.pixiv.net127.0.0.1 fanbox.pixiv.net210.140.92.136 i.pximg.net210.140.131.145 source.pixiv.net210.129.120.50 app-api.pixiv.net 74.120.148.207 g-client-proxy.pixiv.net 210.140.131.145 i1.pixiv.net 210.140.131.145 i2.pixiv.net 210.140.131.145 i3.pixiv.net 210.140.131.145 i4.pixiv.net 210.140.131.159 d.pixiv.org 210.140.92.135 pixiv.pximg.net 210.140.92.134 s.pximg.net#Pixiv End 运行工具 打开后按下这个按钮 测试请使用firefox浏览器，谷歌chrome和国内浏览器不行 打开pixiv.net后，如图操作： 确认安全例外后即可，若登陆页出现相同情况，进行相同操作即可 完成！更详细的的教程（我就是参考了这篇才成功的）：https://2heng.xin/2017/09/19/pixiv/]]></content>
      <tags>
        <tag>教程</tag>
        <tag>pixiv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[习作-风雨中的坚持也是一种爱]]></title>
    <url>%2F2019%2F01%2F22%2F%E4%B9%A0%E4%BD%9C-%E9%A3%8E%E9%9B%A8%E4%B8%AD%E7%9A%84%E5%9D%9A%E6%8C%81%E4%B9%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E7%88%B1%2F</url>
    <content type="text"><![CDATA[风雨中的坚持也是一种爱 &#160; &#160; &#160; &#160;爱，是初春的阳光，是寒冬时的炭火，点点温暖，入人心，也是那风雨中无畏的坚持。&#160; &#160; &#160; &#160;那天晚上，我正在班上晚自习，时间虽已是深秋，天空也早已落下黑色的帷幕，但空气仍闷热到使人快透不过气来。在快下课的时候，雨终于沙沙地下了起来。&#160; &#160; &#160; &#160;下课了，我把书盖在头上，冲向校门，去寻觅那身穿黄色雨衣的高大身影——那是我的父亲。来到他的身旁时，他正帮我擦干座椅。待擦干，我便跨上座椅，披上雨衣，他在我坐好后，也启动了电动自行车。&#160; &#160; &#160; &#160;雨渐渐地大了起来，周围的一切都开始变得朦胧，模糊了。此时的我巴不得快点到家，远离那些冰冷的雨滴，越远越好。&#160; &#160; &#160; &#160;风从我耳边呼呼地刮过，雨也斜着密密麻麻地打在我的脸上。“咔”的一声，车子突然慢了下来，是车子断电了，他立即挺起身子，猛地开始蹬着电动自行车的脚踏板，很快地，车速又回到了断电前，他似要和我一样，尽快回到家，远离这片风雨。&#160; &#160; &#160; &#160;雨倾盆而下，像是要把这辆自行车吞噬，周围来往的都是匆匆赶路回家的人，我也一样。车速渐缓，我又开始着急了起来，本想叫父亲再快一些，但我静心一听，一声声粗气从我前面传来，不禁使我心头一紧，转而纠结了一下，便对他说：“爸，反正快到了，旁边也有挡雨的，走回去就好了。”他没有搭理我，反而又加快了车速，想回家的方向疾驰而去。&#160; &#160; &#160; &#160;总算来到了家楼下，他脱下雨衣，摘下口罩，在昏暗的灯光下，父亲似乎比前些年多了几丝皱纹。我又想起以前同是下雨天的一个晚上他对我考砸后的悉心安慰。我幡然醒悟到父亲不能坚持陪我们一辈子，我也不能等到“子欲养而亲不待”之时才尽心报答他。&#160; &#160; &#160; &#160;父亲所给予我的爱不是无穷无尽的，尽管“父爱如山”，但它也会有消失的一天，我所要做的，就是在它消失前好好保护它，爱护它，不论风雨，也要坚持下去。 本文为作者原创，未经本人许可禁止转载！]]></content>
      <tags>
        <tag>学习</tag>
        <tag>习作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OI-GIF图集(1)]]></title>
    <url>%2F2019%2F01%2F21%2FOI-GIF%E5%9B%BE%E9%9B%86(1)%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>OI</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二十校联考-九上期末考试后记]]></title>
    <url>%2F2019%2F01%2F18%2F%E4%BA%8C%E5%8D%81%E6%A0%A1%E8%81%94%E8%80%83-%E4%B9%9D%E4%B8%8A%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%90%8E%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[考完试了，当然要补一篇后记。 考试的时候慌得一批，难度比以往的大。 数学考试最后一道9分题两问没写，化学涂错一道选择题，计算带错数。 考完估分：698.9~705 然而…… | 语文(120)|数学(120)| 英语(120)|物理(100)|化学(100)|政治(70)|历史(30)|生物(30)|地理(30)|体育(60)|总分(780)|级排(990)||———-: || $$107$$|$$107$$|$$101$$|$$97$$|$$94$$|$$61.6$$|$$27.9$$|$$30$$|$$29.4$$|$$60$$|$$714.9$$|$$20$$| 总分退了4分，级排还进了……. 历史居然考微积分…… 最后，在收拾试卷时，发现 13cm! 我居然写了这么多试卷！ 好了，是时候开始写寒假作业了。 The end.(自此日起距中考还剩152天)]]></content>
      <tags>
        <tag>考试</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOI题库-1.1编程基础之输入输出题解]]></title>
    <url>%2F2019%2F01%2F17%2FNOI%E9%A2%98%E5%BA%93-1-1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[由于此部分太水，所以不附解析，只附代码 题目详见：http://noi.openjudge.cn/ch0101/ Hello, World!123456#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hello, World!"&lt;&lt;endl;&#125; 输出第二个整数12345678#include&lt;iostream&gt;using namespace std;int main()&#123; int a,b,c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c; cout&lt;&lt;b&lt;&lt;endl;&#125; 对齐输出123456789#include&lt;iostream&gt;#include&lt;iomanip&gt;using namespace std;int main()&#123; long long a,b,c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c; cout&lt;&lt;setw(8)&lt;&lt;a&lt;&lt;' '&lt;&lt;setw(8)&lt;&lt;b&lt;&lt;' '&lt;&lt;setw(8)&lt;&lt;c&lt;&lt;endl;&#125; 输出保留3位小数的浮点数123456789#include&lt;iostream&gt;#include&lt;iomanip&gt;using namespace std;int main()&#123; float a; cin&gt;&gt;a; cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;a&lt;&lt;endl;&#125; 输出保留12位小数的浮点数123456789#include&lt;iostream&gt;#include&lt;iomanip&gt;using namespace std;int main()&#123; double a; cin&gt;&gt;a; cout&lt;&lt;fixed&lt;&lt;setprecision(12)&lt;&lt;a&lt;&lt;endl;&#125; 空格分隔输出123456789101112#include&lt;iostream&gt;#include&lt;iomanip&gt;using namespace std;int main()&#123; int b; char c; float d; double a; cin&gt;&gt;c&gt;&gt;b&gt;&gt;d&gt;&gt;a; cout&lt;&lt;c&lt;&lt;' '&lt;&lt;b&lt;&lt;' '&lt;&lt;fixed&lt;&lt;setprecision(6)&lt;&lt;d&lt;&lt;' '&lt;&lt;a&lt;&lt;endl;&#125; 输出浮点数12345678910111213#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; double a; scanf("%lf",&amp;a); printf("%lf\n",a); printf("%.5lf\n",a); printf("%e\n",a); printf("%g\n",a); &#125; 字符三角形1234567891011#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; char a; cin&gt;&gt;a; printf(" %c\n",a); printf(" %c%c%c\n",a,a,a); printf("%c%c%c%c%c\n",a,a,a,a,a);&#125; 字符菱形12345678910111213#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; char a; cin&gt;&gt;a; printf(" %c\n",a); printf(" %c%c%c\n",a,a,a); printf("%c%c%c%c%c\n",a,a,a,a,a); printf(" %c%c%c\n",a,a,a); printf(" %c\n",a);&#125; 超级玛丽游戏12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; printf(" ********\n"); printf(" ************\n"); printf(" ####....#.\n"); printf(" #..###.....##....\n"); printf(" ###.......###### ### ### ### ###\n"); printf(" ........... #...# #...# #...# #...#\n"); printf(" ##*####### #.#.# #.#.# #.#.# #.#.#\n"); printf(" ####*******###### #.#.# #.#.# #.#.# #.#.#\n"); printf(" ...#***.****.*###.... #...# #...# #...# #...#\n"); printf(" ....**********##..... ### ### ### ###\n"); printf(" ....**** *****....\n"); printf(" #### ####\n"); printf(" ###### ######\n"); printf("############################################################## ##################################\n"); printf("#...#......#.##...#......#.##...#......#.##------------------# #...#......#.##------------------#\n"); printf("###########################################------------------# ###############------------------#\n"); printf("#..#....#....##..#....#....##..#....#....##################### #..#....#....#####################\n"); printf("########################################## #----------# ############## #----------#\n"); printf("#.....#......##.....#......##.....#......# #----------# #.....#......# #----------#\n"); printf("########################################## #----------# ############## #----------#\n"); printf("#.#..#....#..##.#..#....#..##.#..#....#..# #----------# #.#..#....#..# #----------#\n"); printf("########################################## ############ ############## ############\n"); &#125;]]></content>
      <tags>
        <tag>题解</tag>
        <tag>NOI题库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷管理语录（1）]]></title>
    <url>%2F2019%2F01%2F17%2F%E6%B4%9B%E8%B0%B7%E7%AE%A1%E7%90%86%E8%AF%AD%E5%BD%95%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>图片</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二十校联考-九上期末考试备考记]]></title>
    <url>%2F2019%2F01%2F12%2F%E4%BA%8C%E5%8D%81%E6%A0%A1%E8%81%94%E8%80%83-%E4%B9%9D%E4%B8%8A%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%87%E8%80%83%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Start an all-round attack on the target! 开始对目标发起全面进攻！]]></content>
      <tags>
        <tag>考试</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的Minecraft生存系列（1）]]></title>
    <url>%2F2019%2F01%2F12%2F%E6%88%91%E7%9A%84Minecraft%E7%94%9F%E5%AD%98%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[存档快一个月了，想着博客刚刚更新没多久，我还是决定分享一下成果吧！（不会告诉你大部分时间是在机房FB推存档进度的） 世界时间：Day32 物品：矿物： 绿宝石*6钻石*35金锭*50萤石粉*64青金石*102铁锭*54 （我好穷啊）石英*68红石粉*561煤炭*7 （wdf）金粒*7 （猪人赠）当然数据这只是这个箱子里的，加上其他地方的也就多一点而已了 战利品： 金剑*3 （来自友好的猪人）金胸甲*2 （来自友好的猪人）金马铠*6 （地狱堡垒）铁马铠*4 （地狱堡垒）钻石马铠*1 （穿在我家白龙马上了）鞍*1 （沙漠神殿）金苹果*1 （地狱堡垒）粘液球*27 （在另一个箱子里）命名牌*2附魔书：爆炸保护Ⅲ （沙漠神殿）经验修补 （钓鱼）锋利Ⅲ （沙漠神殿）火焰保护Ⅲ 水下呼吸Ⅱ （钓鱼….）力量Ⅳ 锋利Ⅲ （钓鱼….出神装….）要致富，先钓鱼 酿药： 原料：地狱疣*107红石粉*8 （前面矿物箱还有一大把）萤石粉*43河豚*2烈焰棒*5金粒*9糖*8成品：力量药水（8:00）*3迅捷药水（8:00）*3水肺药水（8:00）*3家：基本属性：坐标：X：1424 Y：7 Z:-1430大小：不会算…挖了约64*64=4096块石头左右设施：通道： 客厅/厨房： 木有家具欸… 农场： 甘蔗小麦南瓜地狱疣牧场：牛/羊： 鸡： 马（白龙马）： 储物室： 附魔室+地狱传送门： 酿药室： 荒废的史莱姆农场： 重生点-床（地底有Bug，设不了）： 周边-岩浆湖： 进度：地狱： 地狱堡垒： 烈焰人刷怪笼： 期待下一篇生存系列报导！]]></content>
      <tags>
        <tag>Minecraft</tag>
        <tag>我的世界</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解 P3955 【图书管理员】]]></title>
    <url>%2F2018%2F09%2F16%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3%20P3955%20%E3%80%90%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%91%98%E3%80%91%2F</url>
    <content type="text"><![CDATA[看了下面一堆大佬的代码，感觉好麻烦，其实无需排序直接对每一次询问进行比较就好了（反正数据不大，用不上字符串）。 附代码： 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;using namespace std;int n,q,nl[1001],ql[1001],qsl[1001];/*n为图书馆里书的数量，q为读者的数量，nl是书的编码，ql是询问的编码，qsl是询问的编码的长度*/int main()&#123; cin&gt;&gt;n&gt;&gt;q;/*输入*/ for(int a=1;a&lt;=n;a++) &#123; cin&gt;&gt;nl[a];/*读入书的编码*/ &#125; for(int a=1;a&lt;=q;a++) &#123; int ans=-1,k=1; cin&gt;&gt;qsl[a];/*读入询问编码的长度*/ cin&gt;&gt;ql[a];/*读入询问的编码*/ for(int c=1;c&lt;=qsl[a];c++)/*处理比较的数位*/ &#123; k=k*10; &#125; for(int b=1;b&lt;=n;b++)/*逐书比较*/ &#123; if(nl[b]%k==ql[a])/*取书的编码的末qsl[a]位与询问编码比较*/ &#123; if(ans==-1||(ans&gt;nl[b]))/*判断是否未找到或是否比已找到的小*/ &#123; ans=nl[b];/*读入已知书编码最小值*/ &#125; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;/*输出*/ &#125;&#125; 题目详见:https://www.luogu.org/problemnew/show/P3955]]></content>
      <tags>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UMR IT Team 团队守则]]></title>
    <url>%2F2018%2F08%2F30%2FUMR-IT-Team-%E5%9B%A2%E9%98%9F%E5%AE%88%E5%88%99%2F</url>
    <content type="text"><![CDATA[关于团队：本团队是一个和谐的信息技术交流团队 团队已加入 团队联盟 团队分组：主团：QWQ：管理员 dalao：用户 合作伙伴：合作的团队的管理员（仅限一人，团队主优先） ky：em….团队主学校的OIer Rank#1：团队比赛的NO.1（不具备管理权限） 分团：QWQ：管理员 出题团：贡献题目的用户 dalao：用户 Rank#1：团队比赛的NO.1（具备管理权限） 合作伙伴：合作的团队的管理员（仅限一人，团队主优先） 比赛：1.团队管理可以创建比赛，题目难度不限，但不可以违反洛谷的规章制度。 2.团队管理创建的比赛的比赛时间最多1个月。 3.除比赛创建者外，任何成员不得修改比赛，造成的后果小则进行警告，大则免去其管理权限或踢出团队。 4.奖励制度： 比赛结束后第一的直接升为管理员权限（分团），并分组到 Rank#1 组 题目：1.团队管理可以直接创建题目，题目难度不限，但不可以违反洛谷的规章制度。 2.除题目创建者外，任何成员不得不经创建者允许修改题目，造成的后果小则进行警告，大则免去其管理权限或踢出团队。 3.若有用户想为团队提供题目的，请找管理员，并由管理员审核和上传题目。 管理员：1.管理员分两类：分团和主团，团队中权限最大的是QWQ类管理员，主团中只允许有QWQ分类的管理员（目前不开通新管理的招聘）。 2.管理员不得授权其他成员管理权限，一经发现，没收其管理权限并不得在升为管理。 合作伙伴：概述：1.合作伙伴经管理员认证的可获得管理资格（分团）。 2.合作伙伴必须严守管理员规则，否则T出团队。 3.合作伙伴不得在在其他团队乱打团队广告，骚扰他人，严重者撤销其管理权限并取消合作。 审核条件：1.仅限团队主申请。 2.团队需30人以上。 3.题目储存需有5道及以上。 4.该团队成员至少有6人以上加入本团队。 5.一名团队主只可申请合作一次。 6.不接受有违规纪录的团队的申请。 2018-08-03 UMR IT Team 管理团]]></content>
      <tags>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Blog的更新]]></title>
    <url>%2F2018%2F08%2F25%2F%E5%85%B3%E4%BA%8EBlog%E7%9A%84%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[打了一下午的代码，主要就是美化了页面，把头部和尾部改成了各用了一个内联框架，使用了公共头部与尾部，方便以后对头部和尾部的修改，然后顺便将原来左侧的按钮改到了头部，至于头部的About吧，到时候会链接到一篇关于博客功能与意义的文章，不会像现在一样链接到主页了，顺便还要感谢洛谷的某位童鞋，帮我解决了网页去白框的问题（加了一句 margin: 0px!important），这样博客的主体及基本完工了。 美化前后对比： 主页： 文章目录： 文章： 团队：]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用github搭建一个个人图床]]></title>
    <url>%2F2018%2F08%2F15%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%2F</url>
    <content type="text"><![CDATA[相信很多洛谷的伙伴们都很喜欢发图，发图最重要的是图床。 但是，现在我要介绍的是一种无水印原图的图床，我们要借助github这个平台来搭。 github的好处在于它会给每个用户分配一个域名，域名的分配规则是： 你的github用户名.github.io 注意：用户名尽量用英文。 翻译： repositories 存储库 1.在github上注册一个账号后点击右上角的Your repositories: 2.进入repositories界面后点击new创建一个新的存储库，建议存储库命名为：你的github用户名.github.io（如果你已经使用了该存储库那就可以自定义，但是后面的图片链接会有一点不同） 3.创建成功后，先建立一个README文件 4.随后点击上方的Setting并往下拉，去到GitHub Pages设置项，把Source项设定为master branch（如若已设定好则不必改动） 5.最后就可以到存储库里存图了，上传会有几率失败，要多试几次 6.上传完成后即可到你的https://yourgithubname.github.io/你的图片名（加后缀名） 来查看图片了，可以将本链接作为图片链接用到Markdown上。（如果开始你的存储库名是你自定义的，就要把链接改成https://yourgithubname.github.io/存储库名/你的图片名（加后缀名）） 当然，github也是可以搭建网站的。]]></content>
      <tags>
        <tag>教程</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[干物妹！小埋！第三弹 比赛题解]]></title>
    <url>%2F2018%2F08%2F10%2F%E5%B9%B2%E7%89%A9%E5%A6%B9%EF%BC%81%E5%B0%8F%E5%9F%8B%EF%BC%81%E7%AC%AC%E4%B8%89%E5%BC%B9-%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Problem A（小埋与NOIP）：此题其实是计算加权平均数，模拟公式过程再输出最大值即可。 $\bar{x}=\dfrac{x_1w_1+x_2w_2+…+x_nw_n}{w_1+w_2+…+w_n}$ 附标程： 123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;cstring&gt;using namespace std;int main()&#123; string name[6]; int lv[1000]=&#123;0&#125;,s[6][1000]=&#123;0&#125;,sco[6]=&#123;0&#125;,a,alv=0,ansm=0,anss=0; /*输入*/ cin&gt;&gt;a; for(int b=1;b&lt;=a;b++) &#123; cin&gt;&gt;lv[b]; alv=alv+lv[b]; &#125; for(int b=1;b&lt;=5;b++) &#123; int p=0; cin&gt;&gt;name[b]; /*模拟过程*/ for(int c=1;c&lt;=a;c++) &#123; cin&gt;&gt;s[b][c]; p=p+s[b][c]; &#125; sco[b]=p/alv; if(anss&lt;sco[b])/*比较*/ &#123; anss=sco[b]; ansm=b;/*最大值所在位置*/ &#125; &#125; cout&lt;&lt;name[ansm]&lt;&lt;endl;/*输出*/&#125; Problem B（小埋与数羊）：裸DP题，可以通过求从第一行出发后每个点所能得出的最大值，转移方程为：q[a][b]=max(q[a][b],q[a-1][c]+_map[a][b]); 附标程（效率还是比较低，没压缩）： 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;cmath&gt;using namespace std;int pa,ans;int n,_map[100010][5]=&#123;0&#125;,q[100010][5]=&#123;0&#125;;int main()&#123; cin&gt;&gt;n; for(int a=1;a&lt;=n;a++) &#123; for(int b=1;b&lt;=4;b++) &#123; cin&gt;&gt;_map[a][b]; q[a][b]=_map[a][b]; &#125; &#125; pa=0; for(int a=2;a&lt;=n;a++) &#123; for(int b=1;b&lt;=4;b++) &#123; for(int c=1;c&lt;=4;c++) &#123; if(b==c) &#123; continue; &#125; else &#123; q[a][b]=max(q[a][b],q[a-1][c]+_map[a][b]); &#125; &#125; &#125; &#125; for(int a=1;a&lt;=4;a++) &#123; ans=max(q[n][a],ans); &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125; Problem C（小埋与二分法）：又是字符串，不过这次复杂了很多，但脑洞就没有上次的Problem C（小埋与TSF的密信）那么大，可能很多人提交之后都会怀疑数据有问题，那你就错了，其实你们题目可能漏了一点没有看，那就是： 输入数据是密文！本题的题意其实是让你按照加密过程的逆过程来解密，可能有人会连加密过程都看不懂，那我就图解一下吧： 再简单点说其实就是先序遍历转中序遍历附标程： 12345678910111213141516171819202122232425262728293031323334#include&lt;bits/stdc++.h&gt;using namespace std;char a[201000],s[201000];int k;void dg(int l,int r)/*“逆”二分*/&#123; int mid=(l+r)&gt;&gt;1;/*位运算&gt;&gt;1其实是div2*/ a[mid]=s[k]; k++; if (l&lt;mid) &#123; dg(l,mid-1); &#125; if (r&gt;mid) &#123; dg(mid+1,r); &#125;&#125;int main()&#123; k=0; scanf("%s",s);/*输入*/ int l=strlen(s)-1; dg(0,l); /*输出*/ for (int i=0;i&lt;=l;i++) &#123; printf("%c",a[i]); &#125; printf("\n");&#125; 比赛详见:https://www.luogu.org/contestnew/show/9387]]></content>
      <tags>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[干物妹！小埋！第二弹 比赛题解]]></title>
    <url>%2F2018%2F06%2F10%2F%E5%B9%B2%E7%89%A9%E5%A6%B9%EF%BC%81%E5%B0%8F%E5%9F%8B%EF%BC%81%E7%AC%AC%E4%BA%8C%E5%BC%B9%20%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Problem A（小埋与Chicken rabbit with cages）：此题为典型的鸡兔同笼问题，原意用于照顾蒟蒻，故比较简单，模拟解方程组即可。 $ x+y=head $ $ 2x+4y=leg $ 附标程： 12345678910111213141516171819#include&lt;iostream&gt;namespace UMR/*防抄袭命名空间*/&#123; long long a=0,b=0,x=0,y=0; int n;&#125;;using namespace std;using namespace UMR;int main()&#123; cin&gt;&gt;n; for(int d=1;d&lt;=n;d++) &#123; cin&gt;&gt;a&gt;&gt;b; y=(b-2*a)/2; x=a-y; cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl; &#125;&#125; Problem B（小埋与哥哥的企划）：采用深度优先搜索（DFS）算法，可以从两个角度出发： （1） 以专家为出发点，每个专家要么选择他要么不选择他，当所有专家都确定是否选择后，这代表一种备选的方案，但是这个方案是否可行，需要检查是否所有n个问题都得到解决，在搜索的过程中记录最少的专家数。 （2） 以问题为出发点，每个问题都可能会有若干个专家可以解决该问题，依次尝试选择每个专家，然后继续下个问题，直到所有问题被解决。 我们考虑以第（2）个角度出发，尝试如何优化和剪枝，基本思想是：对于某个问题，如果只有一个专家能解决，则该专家是必选的，这是其中一个优化策略。对于尝试对某个问题选择专家时，如果当前已选择的专家数&gt;=已记录的最少专家数-1，则表示即使选择该专家，其最终方案的专家数也不可能少于当前记录的最少专家数，因此不需要尝试选择该专家。 进一步的优化还可以这样做：在调用搜索函数前，检查每一位专家能解决的问题，如果该专家能解决的问题，另一位专家都能解决，则该专家不需要参与选择，即可以在数组中标志该专家为已选择（注意，虽然将他标志为已选择，但是该专家不计算在已选择专家数中），这样在递归搜索时其搜索的规模将会降低。 附标程（效率还是比较低）： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;cstdio&gt;#include &lt;cstring&gt;namespace UMR/*防作弊专用命名空间*/&#123; int a[61][7],wo[61],used[61],n,w,dec[61],ans,min;&#125;;using namespace UMR;using namespace std;void dfs(int step)&#123; bool f=true; if (step&gt;n) &#123; if (min&gt;ans) min=ans; &#125; else if (wo[step]) dfs(step+1); else if (ans&lt;min) for (int i=1; i&lt;=w; i++) if (used[i]==0) &#123; f=true; for (int j=1; j&lt;=a[i][0]; j++) if (a[i][j]==step) &#123; f=false; break; &#125; if (not f) &#123; used[i]++; ans++; for (int j=1; j&lt;=a[i][0]; j++) wo[a[i][j]]++; dfs(step+1); used[i]--; ans--; for (int j=1; j&lt;=a[i][0]; j++) wo[a[i][j]]--; &#125; &#125;&#125;int main ()&#123; scanf("%d%d",&amp;n,&amp;w); memset(a,0,sizeof(a)); memset(wo,0,sizeof(wo)); memset(used,0,sizeof(used)); memset(dec,0,sizeof(dec)); for (int i=1; i&lt;=w; i++) &#123; scanf("%d",&amp;a[i][0]); for (int j=1; j&lt;=a[i][0]; j++) &#123; scanf("%d",&amp;a[i][j]); if (dec[a[i][j]]!=-1) if (dec[a[i][j]]==0) dec[a[i][j]]=i; else dec[a[i][j]]=-1; &#125; &#125; ans=0; for (int i=1; i&lt;=n; i++) if (dec[i]!=0 &amp;&amp; dec[i]!=-1) &#123; if (used[dec[i]]==0) &#123; ans++; used[dec[i]]++; for (int j=1; j&lt;=a[dec[i]][0]; j++) wo[a[dec[i]][j]]++; &#125; &#125; min=2147483647; dfs(1); printf("%d",min); return 0;&#125; Problem C（小埋与TSF的密信）：跟普通的加密解密字符一样，只不过这道题要多做一步： 统计！根据大量的英文文章字母统计，绝大部分的文章中字母”e”,”E”出现得最多，因此可以在此入手。 先将输入的加密后的字符进行统计，找出出现得最多的字母，根据这个字母与”e”,”E”的关系，即可按照正常的思路进行解密。 附标程： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;int main()&#123; char in,str[100000]; long long a=1,max=0,ji=0; int zm[256]=&#123;0&#125;; while((in=getchar())!=EOF) &#123; a++; str[a]=in; if(in&lt;='Z'&amp;&amp;in&gt;='A') &#123; zm[in-65]++; &#125; if(in&gt;='a'&amp;&amp;in&lt;='z') &#123; zm[in-97]++; &#125; &#125; for(int t=0;t&lt;=26;t++) &#123; if(zm[t]&gt;zm[max]) &#123; max=t; &#125; &#125; ji=max+65-'E'; for(int t=2;t&lt;=a;t++) &#123; if(str[t]&gt;='A'&amp;&amp;str[t]&lt;='Z') &#123; if(str[t]-ji&lt;'A') &#123; cout&lt;&lt;(char)(str[t]+26-ji); &#125; else &#123; if(str[t]-ji&gt;'Z') &#123; cout&lt;&lt;(char)(str[t]-26-ji); &#125; else &#123; cout&lt;&lt;(char)(str[t]-ji); &#125; &#125; continue; &#125; if(str[t]&gt;='a'&amp;&amp;str[t]&lt;='z') &#123; if(str[t]-ji&lt;'a') &#123; cout&lt;&lt;(char)(str[t]+26-ji); &#125; else &#123; if(str[t]-ji&gt;'z') &#123; cout&lt;&lt;(char)(str[t]-26-ji); &#125; else &#123; cout&lt;&lt;(char)(str[t]-ji); &#125; &#125; continue; &#125; cout&lt;&lt;str[t]; &#125; &#125; 比赛详见:https://www.luogu.org/contestnew/show/7846]]></content>
      <tags>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解 AT244 【ハンバーガー(Hamburger)】]]></title>
    <url>%2F2018%2F05%2F07%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-AT244-%E3%80%90%E3%83%8F%E3%83%B3%E3%83%90%E3%83%BC%E3%82%AC%E3%83%BC-Hamburger-%E3%80%91%2F</url>
    <content type="text"><![CDATA[很水，直接三目运算符判断，看不懂的自己了解一下三目运算符，附代码： 123456789101112131415#include&lt;iostream&gt;namespace UMR//本人专属命名空间&#123; int a,b,c,d,n;&#125;using namespace std;using namespace UMR;int main()&#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;n;//输入 (n*1-a&gt;=0)?cout&lt;&lt;n*1-a&lt;&lt;&quot; &quot;:cout&lt;&lt;0&lt;&lt;&quot; &quot;;//三目运算符 (n*2-b&gt;=0)?cout&lt;&lt;n*2-b&lt;&lt;&quot; &quot;:cout&lt;&lt;0&lt;&lt;&quot; &quot;;//三目运算符 (n*3-c&gt;=0)?cout&lt;&lt;n*3-c:cout&lt;&lt;0;//三目运算符 cout&lt;&lt;endl;&#125; 题目详见:https://www.luogu.org/problem/show?pid=AT244]]></content>
      <tags>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解 P3152 【正整数序列】]]></title>
    <url>%2F2018%2F04%2F26%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P3152-%E3%80%90%E6%AD%A3%E6%95%B4%E6%95%B0%E5%BA%8F%E5%88%97%E3%80%91%2F</url>
    <content type="text"><![CDATA[其实为什么要递归，直接整除除就好了 规律仔细观察一下，答案其实是 a/2 ans次后等于0 附上代码QWQ~ 123456789101112131415161718#include&lt;iostream&gt;using namespace std;int main()&#123; long long ans=0,a,b,c; cin&gt;&gt;a; if(a==1)/*特判*/ &#123; cout&lt;&lt;-1&lt;&lt;endl; return 0; &#125; while(a/2!=0) &#123; ans++; a=a/2; &#125; cout&lt;&lt;ans&lt;&lt;endl;/*输出*/&#125; 题目详见:https://www.luogu.org/problem/show?pid=3152]]></content>
      <tags>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解 P1421 【小玉买文具】]]></title>
    <url>%2F2018%2F03%2F07%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1421-%E3%80%90%E5%B0%8F%E7%8E%89%E4%B9%B0%E6%96%87%E5%85%B7%E3%80%91%2F</url>
    <content type="text"><![CDATA[简洁，高效 1234567891011#include&lt;iostream&gt;using namespace std;int main()&#123; int a,b=19,c,zo=0,ans=0; cin&gt;&gt;a&gt;&gt;c; zo=a*10+c; ans=zo/b; cout&lt;&lt;ans&lt;&lt;endl; &#125; 题目详见：https://www.luogu.org/problem/show?pid=1421]]></content>
      <tags>
        <tag>题解</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
</search>
